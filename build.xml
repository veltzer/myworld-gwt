<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE project>
<project
	name="gwtworld"
	default="war"
	basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant"
>
	<!-- Properties -->
	<property file="build_local.properties"/>
	<xmlproperty file="build_common_properties.xml" semanticAttributes="true"/>

	<!-- Check environment variables -->
	<property environment="env"/>
	<fail unless="env.ANT_HOME" message="ANT_HOME not set"/>
	<fail unless="env.TOMCAT_HOME" message="TOMCAT_HOME not set"/>
	<fail unless="env.IVY_HOME" message="IVY_HOME not set"/>
	<fail unless="env.JAVA_HOME" message="JAVA_HOME not set"/>
	<fail unless="env.M2_HOME" message="M2_HOME not set"/>
	<fail unless="env.GWT_HOME" message="GWT_HOME not set"/>
	<fail unless="env.GXT_HOME" message="GXT_HOME not set"/>

	<!-- Parameters -->
	<property name="gwt.args" value="" />
	<property name="gwt.appname" value="gwtworld" />
	<property name="gwt.appxml" value="org.meta.gwtworld.Gwtworld" />
	<property name="gwt.html" value="Gwtworld.html" />
	<property name="gwt.warfile" value="${gwt.appname}.war" />

	<!-- Paths -->
	<path id="runtime.class.path">
		<pathelement location="war/WEB-INF/classes"/>
		<fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
	</path>
	<path id="antbuild.class.path">
		<fileset dir="lib/antbuild"/>
	</path>
	<available property="catalina-ant.file.exists" file="lib/catalina-ant.jar"/>
	<available property="tomcat-coyote.file.exists" file="lib/tomcat-coyote.jar"/>
	<available property="tomcat-util.file.exists" file="lib/tomcat-util.jar"/>
	<path id="ant.class.path">
		<fileset dir="lib/antextensions" includes="**/*.jar" erroronmissingdir="false"/>
	</path>

	<!-- New tasks -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
		<classpath>
			<pathelement location="${env.IVY_HOME}/ivy-${env.IVY_VERSION}.jar" />
		</classpath>
	</taskdef>
	<taskdef
		name="tc-deploy"
		classname="org.apache.catalina.ant.DeployTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-list"
		classname="org.apache.catalina.ant.ListTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-reload"
		classname="org.apache.catalina.ant.ReloadTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-findleaks"
		classname="org.apache.catalina.ant.FindLeaksTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-resources"
		classname="org.apache.catalina.ant.ResourcesTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-start"
		classname="org.apache.catalina.ant.StartTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-stop"
		classname="org.apache.catalina.ant.StopTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-undeploy"
		classname="org.apache.catalina.ant.UndeployTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-validate"
		classname="org.apache.catalina.ant.ValidatorTask"
		classpathref="ant.class.path"
		onerror="report"
	/>
	<taskdef
		name="tc-serverinfo"
		classname="org.apache.catalina.ant.ServerinfoTask"
		classpathref="ant.class.path"
		onerror="report"
	/>

	<!-- Targets -->
	<!-- loading our ivy-settigns file, with our own resolvers declarations :) -->
	<!--
	<ivy:settings file="ivy-settings.xml" id="ivy.instance" />
	-->
	<target name="ivy_retrieve" description="retrieve dependencies with ivy">
		<!--
		<ivy:resolve refresh="true" showprogress="true"/>
		<ivy:retrieve sync="true" symlink="true" pattern="lib/[artifact].[ext]"/>
		<ivy:retrieve sync="true" symlink="true"/>
		<ivy:retrieve sync="true" symlink="true" pattern="lib/[conf]/[artifact].[ext]"/>
		-->
		<ivy:retrieve sync="true" symlink="true" pattern="lib/[conf]/[artifact]-[type].[ext]"/>
	</target>
	<target name="ivy_retrieve_local" description="retrieve dependencies with ivy from local">
		<ivy:resolve useCacheOnly="true" showprogress="true"/>
		<ivy:retrieve sync="true" symlink="true"/>
	</target>
	<target name="ivy_cleancache" depends="" description="purge ivy cache">
		<ivy:cleancache/>
	</target>
	<target name="empty" description="Do nothing">
	</target>
	<target name="javac" description="Compile java source to bytecode">
		<!-- create the folder for classes as clean may have removed it -->
		<mkdir dir="war/WEB-INF/classes"/>
		<!-- copy non sources (META-INF,...) to target -->
		<copy todir="war/WEB-INF/classes">
			<fileset dir="src" excludes="**/*.java"/>
		</copy>
		<!-- compile -->
		<javac srcdir="src" includes="**" encoding="utf-8"
			includeantruntime="false"
			destdir="war/WEB-INF/classes"
			source="1.7" target="1.7" nowarn="false"
			debug="true" debuglevel="lines,vars,source">
			<classpath refid="runtime.class.path"/>
			<classpath refid="antbuild.class.path"/>
		</javac>
	</target>
	<target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="src"/>
				<path refid="runtime.class.path"/>
				<path refid="antbuild.class.path"/>
			</classpath>
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xmx256M"/>
			<arg line="-war"/>
			<arg value="war"/>
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="-strict"/>
			<arg line="${gwt.args}"/>
			<arg value="${gwt.appxml}"/>
		</java>
		<!--
			<arg line="-logLevel"/>
			<arg value="DEBUG"/>
		-->
	</target>
	<target name="devmode" depends="javac" description="Run development mode">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
			<classpath>
				<pathelement location="src"/>
				<path refid="runtime.class.path"/>
			</classpath>
			<jvmarg value="-Xmx256M"/>
			<arg value="-startupUrl"/>
			<arg value="${gwt.html}"/>
			<arg line="-war"/>
			<arg value="war"/>
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}"/>
			<arg value="${gwt.appxml}"/>
		</java>
	</target>
	<target name="hosted" depends="devmode" description="Run development mode (NOTE: the 'hosted' target is deprecated)" />
	<target name="build" depends="gwtc" description="Build this project" />
	<target name="war" depends="build" description="Create a war file">
		<zip destfile="${gwt.warfile}" basedir="war"/>
	</target>
	<target name="clean" description="Cleans this project">
		<delete dir="war/WEB-INF/classes" failonerror="false" verbose="true"/>
		<delete dir="war/WEB-INF/deploy" failonerror="false" verbose="true"/>
		<delete dir="war/${gwt.appname}" failonerror="false" verbose="true"/>
		<delete dir="lib" failonerror="false" verbose="true"/>
		<delete dir="gwt-unitCache" failonerror="false" verbose="true"/>
		<delete dir="test-classes" failonerror="false" verbose="true"/>
		<delete file="${gwt.warfile}" failonerror="false" verbose="true"/>
		<delete file=".ant-targets-build.xml" failonerror="false" verbose="true"/>
		<delete dir=".gwt" failonerror="false" verbose="true"/>
	</target>

	<!-- remote tasks -->
	<target name="remote-deploy" depends="" description="Install web application">
		<tc-deploy
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
			path="${app.runtime.path}"
			war="${gwt.warfile}"
		/>
	</target>
	<target name="remote-list" depends="" description="List applications on the Tomcat">
		<tc-list
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
		/>
	</target>
	<target name="remote-reload" depends="" description="Reload web application">
		<tc-reload
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
			path="${app.runtime.path}"
		/>
	</target>
	<target name="remote-findleaks" depends="" description="Find leaks on the Tomcat">
		<tc-findleaks
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
			path="${app.runtime.path}"
		/>
	</target>
	<target name="remote-resources" depends="" description="List resources on the Tomcat">
		<tc-resources
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
		/>
	</target>
	<target name="remote-start" depends="" description="Start the application server">
		<tc-start
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
			path="${app.runtime.path}"
		/>
	</target>
	<target name="remote-stop" depends="" description="Stop the application server">
		<tc-stop
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
			path="${app.runtime.path}"
		/>
	</target>
	<target name="remote-undeploy" depends="" description="Remove web application">
		<tc-undeploy
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
			path="${app.runtime.path}"
		/>
	</target>
	<target name="remote-validate" depends="" description="Validate the application (what is that?)">
		<tc-validate
			path="${app.runtime.path}"
		/>
	</target>
	<target name="remote-serverinfo" depends="" description="Show tomcat version">
		<tc-serverinfo
			url="${app.runtime.url}"
			username="${app.runtime.username}"
			password="${app.runtime.password}"
		/>
	</target>
	<target name="remote-redeploy" depends="war, remote-undeploy, remote-deploy" description="Redeploy the app">
	</target>
</project>
